{"version":3,"sources":["components/image/fb.png","components/retoLogin.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","isSignedIn","state2","isSignedIn2","uiConfig","signInFlow","signInOptions","firebase","auth","PhoneAuthProvider","PROVIDER_ID","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","setState","console","log","handleAuth","bind","handleLogout","renderLoginButton","provider","GoogleAuthProvider","signInWithPopup","then","result","email","catch","error","code","message","userEmail","document","getElementById","value","userPass","signInWithEmailAndPassword","facebookAuthProvider","FacebookAuthProvider","signOut","this","className","onClick","firebaseAuth","type","placeholder","id","correo","face","Component","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bbf9295.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fb.7428c0e4.png\";","import firebase from 'firebase';\nimport React, { Component } from 'react';\nimport './loginFirebase.css';\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\nimport fb from \"./image/fb.png\"\n\nclass App extends Component {\n    state = { isSignedIn: false }\n    state2 = { isSignedIn2: false }\n    uiConfig = {\n        signInFlow: \"popup\",\n        signInOptions: [\n            firebase.auth.PhoneAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            signInSuccess: () => false\n        }\n    }\n\n    constructor() {\n        super();\n        this.state = {\n            user: null\n        };\n\n        this.handleAuth = this.handleAuth.bind(this);\n        this.handleLogout = this.handleLogout.bind(this);\n        this.renderLoginButton = this.renderLoginButton.bind(this);\n    }\n\n\n\n    componentDidMount = () => {\n        firebase.auth().onAuthStateChanged(user => {\n\n            this.setState({ isSignedIn: !!user })\n            console.log(\"user\", user)\n            /*console.log({\n                user: user.displayName,\n                correo: user.email,\n            })*/\n        })\n    }\n\n    componentWillMount() {\n        firebase.auth().onAuthStateChanged(user => {\n            this.setState({\n                user: user\n            });\n        })\n    }\n\n    handleAuth() {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        firebase.auth().signInWithPopup(provider)\n            .then(result => console.log(`${result.user.email} ha iniciado sesion`))\n            .catch(error => console.log(`Error ${error.code}: ${error.message}`));\n    }\n    correo() {\n        var userEmail = document.getElementById(\"email_field\").value;\n        var userPass = document.getElementById(\"password_field\").value;\n        firebase.auth().signInWithEmailAndPassword(userEmail, userPass)\n            .then(result => console.log(`${result.user.email} ha iniciado sesion`))\n            .catch(error => console.log(`Error ${error.code}: ${error.message}`));\n    }\n\n    face() {\n        const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\n        firebase.auth().signInWithPopup(facebookAuthProvider)\n            .then(result => console.log(`${result.user.email} ha iniciado sesion`))\n            .catch(error => console.log(`Error ${error.code}: ${error.message}`));\n    }\n\n    handleLogout() {\n        firebase.auth().signOut()\n            .then(result => console.log(`${result.user.email} ha salido`))\n            .catch(error => console.log(`Error ${error.code}: ${error.message}`));\n    }\n\n    renderLoginButton() {\n        if (this.state.isSignedIn) {\n            return (\n                <div className=\"App\">\n                    {this.state2.isSignedIn2 ? (\n                        <span>\n                            <h1>Bienvenido</h1>\n                            <button onClick={this.handleLogout} className=\"btn-l2\"> Log Out  </button>\n                            <br></br>\n                        </span>\n                    ) : (\n                            <div>\n                                {this.state2.isSignedIn2 = true}\n                                <StyledFirebaseAuth\n                                    uiConfig={this.uiConfig}\n                                    firebaseAuth={firebase.auth()}\n\n                                />\n                                <br></br>\n                            </div>\n\n                        )}\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"login_r\">\n                    <h1 className=\"titulo\">email</h1>\n                    <br></br>\n                    <input type=\"email\" placeholder=\"Correo...\" id=\"email_field\" className=\"email-1\" />\n                    <br></br>\n                    <br></br>\n                    <input type=\"password\" placeholder=\"Password...\" id=\"password_field\" className=\"email-2\" />\n                    <br></br>\n                    <br></br>\n                    \n                    \n                    <button onClick={this.correo} className=\"btn-l1\">Log In</button>\n                    <p className=\"o\">o</p>\n                    <button onClick={this.handleAuth} className=\"btn-l\"> Google</button>\n                    <br></br>\n                    <br></br>\n                    <button onClick={this.face}  className=\"btn-l2\"> Facebook</button>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App-header\">\n                    <h1>Login</h1>\n                </div>\n                <p className=\"App-intro\">\n                    {this.renderLoginButton()}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default App; //exportamos la clase para poder importarla en el index.js\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport firebase from 'firebase';\nimport './index.css';\nimport App from './components/retoLogin';\nimport * as serviceWorker from './serviceWorker';\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyC9_M4-GSZAYDMKBA4pNt_GI7q7lDhJD4E\",\n    authDomain: \"retologin.firebaseapp.com\",\n    databaseURL: \"https://retologin.firebaseio.com\",\n    projectId: \"retologin\",\n    storageBucket: \"\",\n    messagingSenderId: \"45488604558\",\n    appId: \"1:45488604558:web:8a3abacc59d3be334290df\"\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}